/**
 * @fileoverview gRPC-Web generated client stub for proto
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.22.2
// source: operationLog.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')

var user_pb = require('./user_pb.js')
const proto = {};
proto.proto = require('./operationLog_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.OperationLogServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.OperationLogServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.OperationLogCreateRequest,
 *   !proto.proto.OperationLogCreateResponse>}
 */
const methodDescriptor_OperationLogService_Create = new grpc.web.MethodDescriptor(
  '/proto.OperationLogService/Create',
  grpc.web.MethodType.UNARY,
  proto.proto.OperationLogCreateRequest,
  proto.proto.OperationLogCreateResponse,
  /**
   * @param {!proto.proto.OperationLogCreateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.OperationLogCreateResponse.deserializeBinary
);


/**
 * @param {!proto.proto.OperationLogCreateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.OperationLogCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.OperationLogCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.OperationLogServiceClient.prototype.create =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.OperationLogService/Create',
      request,
      metadata || {},
      methodDescriptor_OperationLogService_Create,
      callback);
};


/**
 * @param {!proto.proto.OperationLogCreateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.OperationLogCreateResponse>}
 *     Promise that resolves to the response
 */
proto.proto.OperationLogServicePromiseClient.prototype.create =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.OperationLogService/Create',
      request,
      metadata || {},
      methodDescriptor_OperationLogService_Create);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.OperationLogGetRequest,
 *   !proto.proto.OperationLogGetResponse>}
 */
const methodDescriptor_OperationLogService_Get = new grpc.web.MethodDescriptor(
  '/proto.OperationLogService/Get',
  grpc.web.MethodType.UNARY,
  proto.proto.OperationLogGetRequest,
  proto.proto.OperationLogGetResponse,
  /**
   * @param {!proto.proto.OperationLogGetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.OperationLogGetResponse.deserializeBinary
);


/**
 * @param {!proto.proto.OperationLogGetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.OperationLogGetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.OperationLogGetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.OperationLogServiceClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.OperationLogService/Get',
      request,
      metadata || {},
      methodDescriptor_OperationLogService_Get,
      callback);
};


/**
 * @param {!proto.proto.OperationLogGetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.OperationLogGetResponse>}
 *     Promise that resolves to the response
 */
proto.proto.OperationLogServicePromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.OperationLogService/Get',
      request,
      metadata || {},
      methodDescriptor_OperationLogService_Get);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.OperationLogListRequest,
 *   !proto.proto.OperationLogListResponse>}
 */
const methodDescriptor_OperationLogService_List = new grpc.web.MethodDescriptor(
  '/proto.OperationLogService/List',
  grpc.web.MethodType.UNARY,
  proto.proto.OperationLogListRequest,
  proto.proto.OperationLogListResponse,
  /**
   * @param {!proto.proto.OperationLogListRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.OperationLogListResponse.deserializeBinary
);


/**
 * @param {!proto.proto.OperationLogListRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.OperationLogListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.OperationLogListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.OperationLogServiceClient.prototype.list =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.OperationLogService/List',
      request,
      metadata || {},
      methodDescriptor_OperationLogService_List,
      callback);
};


/**
 * @param {!proto.proto.OperationLogListRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.OperationLogListResponse>}
 *     Promise that resolves to the response
 */
proto.proto.OperationLogServicePromiseClient.prototype.list =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.OperationLogService/List',
      request,
      metadata || {},
      methodDescriptor_OperationLogService_List);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.OperationLogUpdateRequest,
 *   !proto.proto.OperationLogUpdateResponse>}
 */
const methodDescriptor_OperationLogService_Update = new grpc.web.MethodDescriptor(
  '/proto.OperationLogService/Update',
  grpc.web.MethodType.UNARY,
  proto.proto.OperationLogUpdateRequest,
  proto.proto.OperationLogUpdateResponse,
  /**
   * @param {!proto.proto.OperationLogUpdateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.OperationLogUpdateResponse.deserializeBinary
);


/**
 * @param {!proto.proto.OperationLogUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.OperationLogUpdateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.OperationLogUpdateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.OperationLogServiceClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.OperationLogService/Update',
      request,
      metadata || {},
      methodDescriptor_OperationLogService_Update,
      callback);
};


/**
 * @param {!proto.proto.OperationLogUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.OperationLogUpdateResponse>}
 *     Promise that resolves to the response
 */
proto.proto.OperationLogServicePromiseClient.prototype.update =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.OperationLogService/Update',
      request,
      metadata || {},
      methodDescriptor_OperationLogService_Update);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.OperationLogDeleteRequest,
 *   !proto.proto.OperationLogDeleteResponse>}
 */
const methodDescriptor_OperationLogService_Delete = new grpc.web.MethodDescriptor(
  '/proto.OperationLogService/Delete',
  grpc.web.MethodType.UNARY,
  proto.proto.OperationLogDeleteRequest,
  proto.proto.OperationLogDeleteResponse,
  /**
   * @param {!proto.proto.OperationLogDeleteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.OperationLogDeleteResponse.deserializeBinary
);


/**
 * @param {!proto.proto.OperationLogDeleteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.OperationLogDeleteResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.OperationLogDeleteResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.OperationLogServiceClient.prototype.delete =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.OperationLogService/Delete',
      request,
      metadata || {},
      methodDescriptor_OperationLogService_Delete,
      callback);
};


/**
 * @param {!proto.proto.OperationLogDeleteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.OperationLogDeleteResponse>}
 *     Promise that resolves to the response
 */
proto.proto.OperationLogServicePromiseClient.prototype.delete =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.OperationLogService/Delete',
      request,
      metadata || {},
      methodDescriptor_OperationLogService_Delete);
};


module.exports = proto.proto;

