/**
 * @fileoverview gRPC-Web generated client stub for proto
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.22.2
// source: sku.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')

var item_pb = require('./item_pb.js')
const proto = {};
proto.proto = require('./sku_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.SKUServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.SKUServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.SKUCreateRequest,
 *   !proto.proto.SKUCreateResponse>}
 */
const methodDescriptor_SKUService_Create = new grpc.web.MethodDescriptor(
  '/proto.SKUService/Create',
  grpc.web.MethodType.UNARY,
  proto.proto.SKUCreateRequest,
  proto.proto.SKUCreateResponse,
  /**
   * @param {!proto.proto.SKUCreateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.SKUCreateResponse.deserializeBinary
);


/**
 * @param {!proto.proto.SKUCreateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.SKUCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.SKUCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.SKUServiceClient.prototype.create =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.SKUService/Create',
      request,
      metadata || {},
      methodDescriptor_SKUService_Create,
      callback);
};


/**
 * @param {!proto.proto.SKUCreateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.SKUCreateResponse>}
 *     Promise that resolves to the response
 */
proto.proto.SKUServicePromiseClient.prototype.create =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.SKUService/Create',
      request,
      metadata || {},
      methodDescriptor_SKUService_Create);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.SKUGetRequest,
 *   !proto.proto.SKUGetResponse>}
 */
const methodDescriptor_SKUService_Get = new grpc.web.MethodDescriptor(
  '/proto.SKUService/Get',
  grpc.web.MethodType.UNARY,
  proto.proto.SKUGetRequest,
  proto.proto.SKUGetResponse,
  /**
   * @param {!proto.proto.SKUGetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.SKUGetResponse.deserializeBinary
);


/**
 * @param {!proto.proto.SKUGetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.SKUGetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.SKUGetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.SKUServiceClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.SKUService/Get',
      request,
      metadata || {},
      methodDescriptor_SKUService_Get,
      callback);
};


/**
 * @param {!proto.proto.SKUGetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.SKUGetResponse>}
 *     Promise that resolves to the response
 */
proto.proto.SKUServicePromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.SKUService/Get',
      request,
      metadata || {},
      methodDescriptor_SKUService_Get);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.SKUUpdateRequest,
 *   !proto.proto.SKUUpdateResponse>}
 */
const methodDescriptor_SKUService_Update = new grpc.web.MethodDescriptor(
  '/proto.SKUService/Update',
  grpc.web.MethodType.UNARY,
  proto.proto.SKUUpdateRequest,
  proto.proto.SKUUpdateResponse,
  /**
   * @param {!proto.proto.SKUUpdateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.SKUUpdateResponse.deserializeBinary
);


/**
 * @param {!proto.proto.SKUUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.SKUUpdateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.SKUUpdateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.SKUServiceClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.SKUService/Update',
      request,
      metadata || {},
      methodDescriptor_SKUService_Update,
      callback);
};


/**
 * @param {!proto.proto.SKUUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.SKUUpdateResponse>}
 *     Promise that resolves to the response
 */
proto.proto.SKUServicePromiseClient.prototype.update =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.SKUService/Update',
      request,
      metadata || {},
      methodDescriptor_SKUService_Update);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.SKUDeleteRequest,
 *   !proto.proto.SKUDeleteResponse>}
 */
const methodDescriptor_SKUService_Delete = new grpc.web.MethodDescriptor(
  '/proto.SKUService/Delete',
  grpc.web.MethodType.UNARY,
  proto.proto.SKUDeleteRequest,
  proto.proto.SKUDeleteResponse,
  /**
   * @param {!proto.proto.SKUDeleteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.SKUDeleteResponse.deserializeBinary
);


/**
 * @param {!proto.proto.SKUDeleteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.SKUDeleteResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.SKUDeleteResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.SKUServiceClient.prototype.delete =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.SKUService/Delete',
      request,
      metadata || {},
      methodDescriptor_SKUService_Delete,
      callback);
};


/**
 * @param {!proto.proto.SKUDeleteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.SKUDeleteResponse>}
 *     Promise that resolves to the response
 */
proto.proto.SKUServicePromiseClient.prototype.delete =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.SKUService/Delete',
      request,
      metadata || {},
      methodDescriptor_SKUService_Delete);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.SKUListRequest,
 *   !proto.proto.SKUListResponse>}
 */
const methodDescriptor_SKUService_List = new grpc.web.MethodDescriptor(
  '/proto.SKUService/List',
  grpc.web.MethodType.UNARY,
  proto.proto.SKUListRequest,
  proto.proto.SKUListResponse,
  /**
   * @param {!proto.proto.SKUListRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.SKUListResponse.deserializeBinary
);


/**
 * @param {!proto.proto.SKUListRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.SKUListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.SKUListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.SKUServiceClient.prototype.list =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.SKUService/List',
      request,
      metadata || {},
      methodDescriptor_SKUService_List,
      callback);
};


/**
 * @param {!proto.proto.SKUListRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.SKUListResponse>}
 *     Promise that resolves to the response
 */
proto.proto.SKUServicePromiseClient.prototype.list =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.SKUService/List',
      request,
      metadata || {},
      methodDescriptor_SKUService_List);
};


module.exports = proto.proto;

